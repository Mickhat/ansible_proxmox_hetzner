---
- name: Get opnsense serial image
  ansible.builtin.get_url:
    url: "{{ hetzner_pve_opnsense_vm_settings.url }}"
    dest: "/tmp/{{ hetzner_pve_opnsense_vm_settings.url | basename }}"

- name: extract opnsense image
  ansible.builtin.shell:
    cmd: "bzip2 -f -d -v /tmp/{{ hetzner_pve_opnsense_vm_settings.url | basename }}"

### TODO: lookkup
- name: overwrite old opnsense vm?
  ansible.builtin.shell: |
    qm stop {{ hetzner_pve_opnsense_vm_settings.id }}
    qm destroy {{ hetzner_pve_opnsense_vm_settings.id }}
  when: hetzner_pve_setup_opnsense_force 
  ignore_errors: true

- name: Create opnsense VM
  shell: |
      qm create {{ hetzner_pve_opnsense_vm_settings.id }} \
      --onboot 1 --agent 1 --name opnsense \
      --memory {{ hetzner_pve_opnsense_vm_settings.memory }} \
      --net0 virtio={{ hostvars[inventory_hostname].ansible_default_ipv4.macaddress }},bridge={{ hetzner_pve_opnsense_vm_settings.wan_bridge }},link_down=1 \
      --net1 virtio,bridge={{ hetzner_pve_opnsense_vm_settings.lan_bridge }} \
      --args "-serial tcp:127.0.0.1:{{ hetzner_pve_opnsense_vm_settings.id }},server,nowait -drive file=fat:rw:/tmp/qemu_{{ hetzner_pve_opnsense_vm_settings.id }}_vfat/,if=none,id=drive-usb0,format=raw,cache=none -device usb-storage,id=drive-usb0,drive=drive-usb0,removable=on"

- name: Import image and resize disk
  ansible.builtin.shell: |
    qm importdisk {{ hetzner_pve_opnsense_vm_settings.id }} /tmp/{{ hetzner_pve_opnsense_vm_settings.url | basename | regex_replace('.bz2', '') }} local
    qm set {{ hetzner_pve_opnsense_vm_settings.id }} --scsihw virtio-scsi-pci --scsi0 {{ hetzner_pve_opnsense_vm_settings.storage }}:{{ hetzner_pve_opnsense_vm_settings.id }}/vm-{{ hetzner_pve_opnsense_vm_settings.id }}-disk-0.raw
    qm set {{ hetzner_pve_opnsense_vm_settings.id }} --boot c --bootdisk scsi0
    qm resize {{ hetzner_pve_opnsense_vm_settings.id }} scsi0 {{ hetzner_pve_opnsense_vm_settings.disk_size }}

- name: Add Internal bridge for opnsense
  ansible.builtin.blockinfile:
    path: /etc/network/interfaces
    block: |
      auto {{ hetzner_pve_opnsense_vm_settings.wan_bridge }}
      iface {{ hetzner_pve_opnsense_vm_settings.wan_bridge }} inet manual
              bridge-ports none
              bridge-stp off
              bridge-fd 0

      auto {{ hetzner_pve_opnsense_vm_settings.lan_bridge }}
      iface {{ hetzner_pve_opnsense_vm_settings.lan_bridge }} inet static
              address {{ hetzner_pve_network_lan_ip }}/{{ hetzner_pve_network_lan_subnet }}
              bridge-ports none
              bridge-stp off
              bridge-fd 0
  register: pve_temp_bridge

- name: fire up temp bridge and opnsense
  shell: |
    ifup {{ hetzner_pve_opnsense_vm_settings.wan_bridge }}
    ifup {{ hetzner_pve_opnsense_vm_settings.lan_bridge }}
    qm start {{ hetzner_pve_opnsense_vm_settings.id }}
  when: pve_temp_bridge

- name: Wait for opnsense coming up
  wait_for:
    port: "{{ hetzner_pve_opnsense_vm_settings.id }}"
    host: "localhost"
    delay: 10

- name: Starting opnsense-importer
  expect:
    command: "telnet  -e ! localhost {{ hetzner_pve_opnsense_vm_settings.id }}"
    timeout: 60
    echo: true
    responses:
      'Press any key to start the configuration importer':
        - ''
      'Select device to import from':
        - 'da1'
  register: hetzner_pve_setup_opnsense
  failed_when: hetzner_pve_setup_opnsense.msg is search('error')

- name: Gather facts
  ansible.builtin.setup:

- name: Update Network Interfaces
  ansible.builtin.template:
    src: pve_interfaces.j2
    dest: /etc/network/interfaces
    owner: root
    group: root
    mode: '0644'
    backup: true

- name: Add OPNsense image to opns
  ansible.builtin.shell: |
    qm stop {{ hetzner_pve_opnsense_vm_settings.id }}
    qm set {{ hetzner_pve_opnsense_vm_settings.id }} --net0 virtio={{ hostvars[inventory_hostname].ansible_default_ipv4.macaddress }},bridge={{ hetzner_pve_opnsense_vm_settings.wan_bridge }} \
    --args ""
    vzdump {{ hetzner_pve_opnsense_vm_settings.id }}

- name: OPNsense setup done - reboot
  reboot:
    post_reboot_delay: 20
    test_command: "echo -ne {{ hetzner_pve_luks_pass }} > /lib/cryptsetup/passfifo"

- name: Wait for system comming up after unlock
  wait_for:
    port: 443
    host: "{{ inventory_hostname }}"
    delay: 10
  delegate_to: localhost


